{
	"scopeName": "source.esi",
	"name": "ESI",
	"fileTypes": [
		"esi"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"match": "\\b(%[A-Za-z0-9_]+%)\\b",
			"name": "string.quoted.other.variable.include.c"
		},
		{
			"match": "\\b(NULL|true|false|TRUE|FALSE|N/A)\\b",
			"name": "constant.language.c"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"begin": "^\\s*((#)\\s*line)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.directive.line.c"
				},
				"2": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
			"name": "meta.preprocessor.c",
			"patterns": [
				{
					"include": "#numbers"
				},
				{
					"include": "#line_continuation_character"
				}
			]
		},
		{
			"match": "\\b(CMD_EXECUTE|VARIABLES|TEST DEFINITION|STEP DEFINITION|STEP INPUTS|STEP OUTPUTS|STEP ([0-9]+|Restart)|TEST STEPS|MANUAL_VERIFY|EXTERNAL VERIFY|INCLUDE)\\b",
			"name": "support.type.sys-types.c"
		},
		{
			"include": "#block"
		},
		{
			"match": "\\b((429|1553|DIS|PART|FUNC|CMD)_[A-Za-z0-9_]+)\\b",
			"name": "entity.name.function.c"
		},
		{
			"match": "\\b(include file|Test Description|Test Configuration|Test Dependencies|Step Description|Step Requirements|Step Dependencies|Step Conditions|Step Expected Results)\\b",
			"name": "entity.name.function.c"
		},
		{
			"match": "\\b((UBYTE|USHORT|INT|UINT|ULONGINT|FLOAT|DOUBLE|STRING)(ARRAY)?_[A-Za-z0-9_]+|time)\\b",
			"name": "variable.other.member.c"
		},
		{
			"begin": "(?x)\n(?:\n  ^ |\n  (?:\n    (?=\\s)(?<!else|new|return)(?<=\\w)  # word + space before name\n    |\n    (?=\\s*[A-Za-z_])(?<!&&)(?<=[*&>])   # type modifier before name\n  )\n)\n(\\s*)(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.function.leading.c"
				},
				"3": {
					"name": "entity.name.function.c"
				},
				"4": {
					"name": "punctuation.definition.parameters.c"
				}
			},
			"end": "(?<=\\})|(?=#)|(\n)",
			"name": "meta.function.c",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#parens"
				},
				{
					"match": "\\b(const)\\b",
					"name": "storage.modifier.c"
				},
				{
					"include": "#block"
				}
			]
		},
		{
			"include": "#line_continuation_character"
		},
		{
			"begin": "([)([-_a-zA-Z0-9/s]+)(])",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.xml"
				},
				"2": {
					"name": "entity.name.tag.xml"
				},
				"3": {
					"name": "entity.name.tag.namespace.xml"
				},
				"4": {
					"name": "punctuation.separator.namespace.xml"
				},
				"5": {
					"name": "entity.name.tag.localname.xml"
				}
			},
			"end": "([/)(\\2)(])",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.xml"
				},
				"2": {
					"name": "punctuation.definition.tag.xml"
				},
				"3": {
					"name": "entity.name.tag.xml"
				},
				"4": {
					"name": "entity.name.tag.namespace.xml"
				},
				"5": {
					"name": "punctuation.separator.namespace.xml"
				},
				"6": {
					"name": "entity.name.tag.localname.xml"
				},
				"7": {
					"name": "punctuation.definition.tag.xml"
				}
			},
			"name": "meta.tag.no-content.xml",
			"patterns": [
				{
					"include": "#tagStuff"
				}
			]
		},
		{
			"begin": "([/?)(?:([-\\w\\.]+)((:)))?([-\\w\\.:]+)",
			"captures": {
				"1": {
					"name": "punctuation.definition.tag.xml"
				},
				"2": {
					"name": "entity.name.tag.namespace.xml"
				},
				"3": {
					"name": "entity.name.tag.xml"
				},
				"4": {
					"name": "punctuation.separator.namespace.xml"
				},
				"5": {
					"name": "entity.name.tag.localname.xml"
				}
			},
			"end": "(/?])",
			"name": "meta.tag.xml",
			"patterns": [
				{
					"include": "#tagStuff"
				}
			]
		},
		{
			"include": "#entity"
		},
		{
			"include": "#bare-ampersand"
		}		
	],
	"repository": {
		"access": {
			"captures": {
				"2": {
					"name": "punctuation.separator.dot-access.c"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.c"
				},
				"4": {
					"name": "variable.other.member.c"
				}
			},
			"match": "((\\.)|(->))([a-zA-Z_][a-zA-Z_0-9]*)\\b(?!\\s*\\()"
		},
		"block": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.c"
						}
					},
					"end": "\\}|(?=\\s*#\\s*endif\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.c"
						}
					},
					"name": "meta.block.c",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#preprocessor-rule-enabled-block"
				},
				{
					"include": "#preprocessor-rule-disabled-block"
				},
				{
					"include": "#preprocessor-rule-other-block"
				},
				{
					"include": "#access"
				},
				{
					"include": "#c_function_call"
				},
				{
					"captures": {
						"1": {
							"name": "variable.other.c"
						},
						"2": {
							"name": "punctuation.definition.parameters.c"
						}
					},
					"match": "(?x)\n(?:\n  (?:\n    (?=\\s)(?<!else|new|return)\n    (?<=\\w) \\s+  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"name": "meta.initialization.c"
				},
				{
					"include": "#block"
				},
				{
					"include": "$base"
				}
			]
		},
		"c_function_call": {
			"captures": {
				"1": {
					"name": "punctuation.whitespace.function-call.leading.c"
				},
				"2": {
					"name": "support.function.any-method.c"
				},
				"4": {
					"name": "punctuation.definition.parameters.c"
				}
			},
			"match": "(?x)\n(?:\n  (?=\\s)\n  (?:(?<=else|new|return) | (?<!\\w)) (\\s+)\n)?\n\n# Actual name\n(\n  \\b\n  (?!\n    (while|for|do|if|else|switch|catch|enumerate|return|sizeof|r?iterate)\n    \\s* \\(\n  )\n  (?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | ::)++\n)\n\\s*(\\() # Opening bracket",
			"name": "meta.function-call.c"
		},
		"comments": {
			"patterns": [
				{
					"begin": "(^[ \\t]+)?(?=#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "#",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.cpp",
							"patterns": [
								{
									"include": "#line_continuation_character"
								}
							]
						}
					]
				}
			]
		},
		"disabled": {
			"begin": "^\\s*#\\s*if(n?def)?\\b.*$",
			"end": "^\\s*#\\s*endif\\b",
			"patterns": [
				{
					"include": "#disabled"
				},
				{
					"include": "#pragma-mark"
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.c"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
					"name": "constant.numeric.c"
				}
			]
		},
		"parens": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.c"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.c"
				}
			},
			"name": "meta.parens.c",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
	
		"preprocessor-rule-disabled": {
			"begin": "^\\s*(((#)if)\\s+(0)\\b).*",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				},
				"4": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else)\\b)",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.directive.conditional.c"
						},
						"3": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"contentName": "comment.block.preprocessor.if-branch",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-disabled-block": {
			"begin": "^\\s*(((#)if)\\s+(0)\\b).*",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				},
				"4": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else\\b))",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.directive.conditional.c"
						},
						"3": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"contentName": "comment.block.preprocessor.if-branch.in-block",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled": {
			"begin": "^\\s*(((#)if)\\s+(0*1)\\b)",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				},
				"4": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else)\\b).*",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.directive.conditional.c"
						},
						"3": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"contentName": "comment.block.preprocessor.else-branch",
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"preprocessor-rule-enabled-block": {
			"begin": "^\\s*(((#)if)\\s+(0*1)\\b)",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				},
				"4": {
					"name": "constant.numeric.preprocessor.c"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"patterns": [
				{
					"begin": "^\\s*(((#)\\s*else)\\b).*",
					"beginCaptures": {
						"1": {
							"name": "meta.preprocessor.c"
						},
						"2": {
							"name": "keyword.control.directive.conditional.c"
						},
						"3": {
							"name": "punctuation.definition.directive.c"
						}
					},
					"contentName": "comment.block.preprocessor.else-branch.in-block",
					"end": "(?=^\\s*#\\s*endif\\b)",
					"patterns": [
						{
							"include": "#disabled"
						},
						{
							"include": "#pragma-mark"
						}
					]
				},
				{
					"begin": "\\G",
					"end": "(?=^\\s*#\\s*(else|endif)\\b)",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"preprocessor-rule-other": {
			"begin": "^\\s*(((#)\\s*if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "^\\s*(((#)\\s*(endif))\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		"preprocessor-rule-other-block": {
			"begin": "^\\s*(((#)\\s*if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
			"beginCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"end": "^\\s*(((#)\\s*endif)\\b)",
			"endCaptures": {
				"1": {
					"name": "meta.preprocessor.c"
				},
				"2": {
					"name": "keyword.control.directive.conditional.c"
				},
				"3": {
					"name": "punctuation.definition.directive.c"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.c"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.c"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.c"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.c"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.c"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.c"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.c"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.c"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.c"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.c"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.c"
				},
				{
					"begin": "\\?",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.ternary.c"
						}
					},
					"end": ":",
					"endCaptures": {
						"0": {
							"name": "keyword.operator.ternary.c"
						}
					},
					"patterns": [
						{
							"include": "#access"
						},
						{
							"include": "#c_function_call"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\             |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}     |\n[4-7]\\d?        |\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.c"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.c"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?                           # field (argument #)\n[#0\\- +']*                          # flags\n[,:_]?                              # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?          # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?    # precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]           # conversion type",
					"name": "constant.other.placeholder.c"
				},
				{
					"match": "%",
					"name": "invalid.illegal.placeholder.c"
				}
			]
		}
	},
	"version": "https://github.com/atom/language-c/commit/0d0f32388e73fc91a86f4c31ff59c36191869d63"
}